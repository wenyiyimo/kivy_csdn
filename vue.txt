<template>
	<view class="index">
		<view class="header">
			<view style="height: 40px;background-color: #FFFFfF;"></view>
			<view style="flex-direction: row;justify-content: space-between;">
				<uni-icons style="margin-top: 8px;margin-left: 10px;" color="#000000" size="40" type="compose" @click="editYuan" />
				<uni-search-bar
					class="search-layout"
					:style="{ width: `${searchwidth}px` }"
					v-model="search"
					placeholder="请输入搜索关键词"
					bgColor="#EEEEEE"
					cancelButton="none"
					@confirm="searchEvent"
					@clear="searchClearEvent"
					borderColor="#000000"
				></uni-search-bar>
				<text class="search-text" @click="searchEvent">搜索</text>
			</view>
		</view>

		<view class="lunbo" style="height: 200px;">
			<uni-swiper-dot :info="lunbolist" :current="current" :dotsStyles="dotsStyle" field="content" mode="nav">
				<swiper style="height: 160px;" autoplay="true" circular="true" interval="3000" duration="1000" @change="changeCurrent">
					<swiper-item v-for="(item, index) in lunbolist" :key="index">
						<view><image style="height: 160px;" class="swiper-img" :src="item.url" mode="aspectFill" @click="click(index)"></image></view>
					</swiper-item>
				</swiper>
			</uni-swiper-dot>
		</view>
		
		<view class="setting-data">
			
			<uni-icons color="#000000" size="50" type="heart" @click="navheart" />
			<uni-icons color="#000000" size="50" type="color" @click="navhistory" />
			<uni-icons color="#000000" size="50" type="gear" @click="navset" />
		</view>
		<view class="tab-data" style="position: sticky;top: 95px;z-index:999;">
			<view class="tab-class">
				<view v-for="(item, index) in classlist" :key="index">
					<text class="tab-class-item" :class="[classnum == index ? 'tab-class-item-active' : '']" @click="changeclassnum(index)">{{item[0]}}</text>
				</view>
			</view>
			<view class="tab-time">
				<view v-for="(item, index) in timelist" :key="index">
					<text class="tab-time-item" :class="[timenum == index ? 'tab-time-item-active' : '']" @click="changetimenum(index)">{{item[0]}}</text>
				</view>
				
			</view>
		</view>
		<view class="data-item" v-for="(item, index) in list" :key="index">
			<view class="out-item">
				<view class="tui-list-item" @click="handlerButton(item)">
					<image :src="item.picurl" mode="aspectFit" class="item-img"></image>
					<view class="item-box">
						<text class="item-title">{{ item.name }}</text>
						<text class="item-state">类型：{{ item.style }}</text>
						<view style="display: flex;flex-direction: row;justify-content: flex-start;">
							<text class="item-name" v-if="item.starring != ''">导演：{{ item.starring.slice(0, 3).replace(';','') }}</text>
							<text class="item-name" v-if="item.starring == ''">导演：无</text>
							<text style="margin-left: 20px;" v-if="item.score != ''" class="item-name">评分：{{ item.score }}</text>
						</view>
						<text v-if="item.director != ''" class="item-userstate">演员：{{ item.director }}</text>
						<text v-if="item.director == ''" class="item-userstate">演员：无</text>
						<text class="item-name" v-if="classnum != 1&&classnum!=3&&classnum!=4">状态：更新至{{ item.ipad_play_for_list.episode }}集(共{{  item.ipad_play_for_list.finish_episode }}集)</text>
						<text class="item-name" v-if="classnum == 1">年份：{{ item.year }}</text>
						<text class="item-name" v-if="classnum == 3&&item.date">最后更新：{{ item.date}}</text>
						<text class="item-name" v-if="classnum == 3&&!item.date">状态：更新至{{ item.ipad_play_for_list.episode }}集(共{{  item.ipad_play_for_list.finish_episode }}集)</text>
					<text class="item-name" v-if="classnum == 4&&item.year!=''">年份：{{ item.year}}</text>
					<text class="item-name" v-if="classnum == 4&&item.year==''">地区：{{ item.zone}}</text>				
										
					
					</view>
				</view>
			</view>
		</view>
		<uni-fab direction="vertical" horizontal="right" vertical='bottom' :pattern="pattern" :content="content" @trigger="trigger"></uni-fab>
		<uni-load-more :status="status"></uni-load-more>
	</view>
</template>

<script>
import db from '../../utils/database.js';
import http from '../../utils/request.js';
import ajax from '../../utils/uni-ajax'
export default {
	data() {
		return {
			content: [{
				text: '收藏',
			},
			{
				text: '历史',
			},
			{
				text: '设置',
			}],
			status:"loadmore",
			classnum:0,
			timenum:0,
			search: '',
			lunbo:true,
			list: [],
			classlist:[['追剧','teleplay'],['电影','film'],['动漫','cartoon'],['综艺','tvshow'],['记录片','documentary']],
			timelist:[['最近更新','time'],['近期热门','热门'],['评分最高','score']],
			lunbolist: [],
			current: 0,
			pattern: {
				color: '#7A7E83',
				backgroundColor: '#fff',
				selectedColor: '#007AFF',
				buttonColor: '#fff',
				iconColor: '#aaa'
			},
			notiveImage: '../../static/star.png',
			dotsStyle: {
				color: '#000000',
			
			},
			fullControlsWidth: null,
			fullControlsHeigt: null,
			searchwidth: 200,
			startnum:0,
			orderclass:"time",
			listTab:"teleplay",
		};
	},
	created() {
		this.fullControlsHeigt = uni.getSystemInfoSync().screenHeight;
		this.fullControlsWidth = uni.getSystemInfoSync().screenWidth + 1;
		
		if (this.fullControlsWidth > this.fullControlsHeigt) {
			this.searchwidth = (this.fullControlsWidth * 3) / 4;
		} else {
			this.searchwidth = (this.fullControlsWidth * 2) / 3;
		}
	},
	methods: {
		trigger(e){
			if(e.item.text=='收藏'){
				let url = `/pages/heart/heart`;
				uni.navigateTo({ url: url });
			}
			if(e.item.text=='历史'){
				let url = `/pages/history/history`;
				uni.navigateTo({ url: url });
			}
			if(e.item.text=='设置'){
				
				let url = `/pages/setting/setting`;
				uni.navigateTo({ url: url });
			}
		},
		async handlerButton(item){
			this.search = item.name;
			this.searchEvent()
		},

		async getclassdata(){
			let url=`http://m.v.sogou.com/napi/video/classlist?&order=${this.timelist[this.timenum][1]}&listTab=${this.classlist[this.classnum][1]}&start=${this.startnum}&len=10`;
			let gethtml = await ajax.get(url);
			let jsondata = gethtml.data.listData.results;
			this.list=[...this.list,...jsondata];
		},
		changeclassnum(index){
			this.classnum=index;
			this.startnum=0;
			this.list=[];
			this.getclassdata();
		},
		changetimenum(index){
			this.timenum=index;
			this.startnum=0;
			this.list=[];
			this.getclassdata();
		},
		navheart(){
			let url = `/pages/heart/heart`;
			uni.navigateTo({ url: url });
		},
		navhistory(){
			
			let url = `/pages/history/history`;
			uni.navigateTo({ url: url });
		},
		navset(){
			
			let url = `/pages/setting/setting`;
			uni.navigateTo({ url: url });
		},
		changeCurrent(e) {
			this.current = e.detail.current;
		},
		async click(index) {
			var item = this.lunbolist[index];
			
			this.search = item.content.trim();
			this.searchEvent()
		},
		async editYuan() {
			const url = `/pages/site/site`;
			uni.navigateTo({ url: url });
		},
		async searchEvent() {
			if (this.search === '') {
				return false;
			} else {
				const urll = `/pages/search/search?search=${this.search}`;
				uni.navigateTo({ url: urll });
			}
		},
		async searchClearEvent() {
			this.search = '';
		},
		async getSite() {
			let url="https://m.v.qq.com";
			let gethtml = await ajax.get(url);
			let html = gethtml.data;
			if (typeof html != "string") {
				html = JSON.stringify(html);
			}
			// let re = new RegExp("重磅热播([\\s\\S]*?)打开", 'g');
			let re = new RegExp("重磅热播([\\s\\S]*?)猜你喜欢", 'g');
			let t;
			let rangeResults = [];
			while ((t = re.exec(html)) != null) {
				rangeResults.push(t[1]);
			};
			re=new RegExp('class=\"item_content\"([\\s\\S]*?)</div></a>','g');
			let listResults=[];
			while ((t = re.exec(rangeResults[0])) != null) {
				listResults.push(t[1]);
			};
			let nameResults = [];
			let picResults = [];
			// let stateResults=[];
			for(let listr of listResults){
				re = new RegExp("<div class=\"item_title needsclick\">([\\s\\S]*?)</div>", 'g')
			    if((t = re.exec(listr)) != null) {
			    	nameResults.push(t[1].trim());
			    }else{
					re = new RegExp("<div class=\"item_title two_row needsclick\">([\\s\\S]*?)</div>", 'g')
					t = re.exec(listr)
					nameResults.push(t[1].trim());
				};
				re = new RegExp("<img dsrc=\"([\\s\\S]*?)\" lazyLoad=", 'g');
				if((t = re.exec(listr)) != null) {
					if (t[1].indexOf('http') == 0) {
						picResults.push(t[1].replace(new RegExp("\\\\", "g"), ""));
					} else {
						let httpurl = ["https:", t[1]].join("")
						picResults.push(httpurl.replace(new RegExp("\\\\", "g"), ""));
					}
				};
				// re=new RegExp("item_count needsclick\">([\\s\\S]*?)</div>","g");
				// if((t = re.exec(listr)) != null) {
				// 	stateResults.push(t[1].trim());
				// }
			}
			for (let j = 0; j < nameResults.length; j++) {
				
			
			this.lunbolist.push({
				url: picResults[j],
				content:" "+nameResults[j]
			})

			}
			// console.log(this.lunbolist)
			this.lunbo=true;
		},

		async updataSite(siteList) {
			for (let sitelist of siteList) {
				if (sitelist.isActive) {
					const res = await http.siteUrl(sitelist.url);
					if (res && res.length > 0) {
						for (const i of res) {
							if (i.name.length > 0) {
								await db.add('site', i);
							} else {
								uni.showToast({
									title: '${sitelist.name}-导入站源错误!',
									duration: 1000
								});
							}
						}
					}
				}
			}
		}
	},
	onLoad() {
		var urlList = uni.getStorageSync('urlNotive');
		if (!urlList) {
			uni.setStorageSync('urlNotive', []);
		} else {
			this.updataSite(urlList);
		}

	},
	onShow() {
		

			this.list = [];
			     
				this.lunbolist = [];
				this.lunBo = false;
				this.getSite();
			this.getclassdata()
		
	},
	async onReachBottom() {
	    this.status = "loading";
	    this.startnum=this.startnum+10;
	    await this.getclassdata();
	    this.status = "loadmore";
	  },
	// onTabItemTap() {
	// 	uni.setStorageSync('isRefresh', 0);
	// 	this.list=[]
	// 	this.getSite();
	// }
};
</script>

<style lang="scss" scoped>
.index {
}
.setting-data{
	
	margin-bottom: 10px;
	flex-direction: row;
	justify-content: space-between;
	margin-left: 20px;
	margin-right: 20px;
}
.setting-heart{
	width: 40px;
	height: 40px;
}
.setting-setting{
	width: 40px;
	height: 40px;
}
.tab-data{
	background-color: #fff;
}
.tab-class{
	margin-bottom: 10px;
	flex-direction: row;
	justify-content: space-between;
	margin-left: 20px;
	margin-right: 20px;
	.tab-class-item{
		color: #000000;
		font-size: 20px;
	}
	.tab-class-item-active{
		color: #00aa00;
		font-size: 20px;
	}
}

.tab-time{
	flex-direction: row;
	justify-content: space-between;
	margin-left: 20px;
	margin-right: 20px;
	.tab-time-item{
		color: #000000;
		font-size: 20px;
	}
	.tab-time-item-active{
		color: #00aa00;
		font-size: 20px;
	}
}
.header {
	background-color: #ffffff;
	display: flex;
	position: sticky;
	top: 0px;
	z-index: 99;
	flex-direction: column;
	justify-content: space-between;
	.header-img {
		height: 40px;
		width: 40px;
		margin-top: 8px;
		margin-left: 10px;
	}
	.search-layout {
		height: 50px;
	}
	.search-text {
		height: 50px;
		margin-top: 15px;
		font-size: 20px;
		margin-right: 20px;
	}
}

.lunbo {
	font-size: 60px;
	margin-left: 20px;
	margin-right: 20px;
}
.data-item {
	margin-top: 10px;
	.out-item {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		.tui-list-item {
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			.item-img {
				height: 150px;
				width: 100px;
				margin-right: 20px;
				margin-left: 20px;
			}

			.item-box {
				width: 300px;
				display: flex;
				flex-direction: column;
				justify-content: space-around;
				margin-right: 20px;
			}

			.item-title {
				font-size: 20px;
			}
			.item-state {
				color: #999;
				font-size: 16px;
			}
			.item-userstate {
				color: #999;
				font-size: 16px;
			}
			.item-name {
				color: #999;
				font-size: 16px;
			}
		}
	}
}
</style>
