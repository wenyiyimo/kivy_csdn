this.search = item.content.split('---')[0];

async setHistory(name) {
	let key = this.name + '@@' + this.href;
	await db.remove('history', key);
	let item = {
		name: this.name,
		href: this.href,
		title: this.title,
		image: this.image,
		state: this.state,
		userState: name
	};
	await db.addNotive('history', item);
	let res = await db.getAllDB('history');
	if(res.flag){
		if(res.data.length>50){
			await db.remove('notive', res.data[0]);
		}
	}
	if (this.notiveImage == '../../static/star.png') {
		await db.remove('notive', key);
		await db.addNotive('notive', item);
		uni.setStorageSync('isRefresh', 1);
	}
},


<template>
	<view class="index">
		<view class="header">
			<view style="height: 40px;background-color: #FFFFfF;"></view>
			<view style="flex-direction: row;justify-content: space-between;">	
			<uni-icons style="margin-top: 8px;margin-left: 10px;" color="#000000" size="40" type="arrow-left" @click="pageback" />

				<uni-search-bar	
				class="search-layout"
					:style="{ width: `${searchwidth}px` }"	
				v-model="search"	
				placeholder="请输入搜索关键词"
					bgColor="#EEEEEE"	
				cancelButton="none"	
				@confirm="searchEvent"
					@clear="searchClearEvent"	
				borderColor="#000000"	
			></uni-search-bar>
				<text class="search-text" @click="searchEvent">搜索</text>	
		</view>
		</view>

		<view v-if="blackstate">
			<text class="black-state">您还未观看过任何影片!</text>
			<text class="black-state">观看后会在此页展示!</text>
			<text class="black-state">此页会自动检测影片是否更新!</text>
			<text class="black-state">如果存在更新,会以轮播形式展示!</text>
			<text class="black-state">初次使用需导入站源或添加订阅!</text>
		</view>
		<view class="lunbo" v-if="lunBo">
			<uni-swiper-dot :info="lunbolist" :current="current" :dotsStyles="dotsStyle" field="content" mode="nav">
				<swiper autoplay="true" circular="true" interval="2000" duration="1000" @change="changeCurrent">
					<swiper-item v-for="(item, index) in lunbolist" :key="index">
						<view><image class="swiper-img" :src="item.url" mode="aspectFill" @click="click(index)"></image></view>
					</swiper-item>
				</swiper>
			</uni-swiper-dot>
		</view>

		<view class="data-item" v-for="(item, index) in list" :key="index">
			<view class="out-item">
				<view class="tui-list-item" @click="handlerButton(item)">
					<image :src="item.image" mode="aspectFit" class="item-img"></image>
					<view class="item-box">
						<text class="item-title">{{ item.title }}</text>
						<text class="item-name">来源：{{ item.name }}</text>
						<text class="item-state">状态：{{ item.state }}</text>
						<text class="item-userstate">上次观看：{{ item.userState }}</text>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
import db from '../../utils/database.js';
import http from '../../utils/request.js';
export default {
	data() {
		return {
			blackstate: false,
			lunBo: false,
			search: '',
			list: [],
			lunbolist: [],
			current: 0,
			tempList: [],
			dotsStyle: {
				border: '1px rgba(83, 200, 249,0.3) solid',
				color: '#fff',
				selectedBackgroundColor: 'rgba(83, 200, 249,0.9)',
				selectedBorder: '1px rgba(83, 200, 249,0.9) solid'
			},
			fullControlsWidth: null,
			fullControlsHeigt: null,
			searchwidth: 200
		};
	},
	created() {
		this.fullControlsHeigt = uni.getSystemInfoSync().screenHeight;
		this.fullControlsWidth = uni.getSystemInfoSync().screenWidth + 1;
		if (this.fullControlsWidth > this.fullControlsHeigt) {
			this.searchwidth = (this.fullControlsWidth * 3) / 4;
		} else {
			this.searchwidth = (this.fullControlsWidth * 2) / 3;
		}
	},
	methods: {
		changeCurrent(e) {
			this.current = e.detail.current;
		},
		async click(index) {
			var item = this.tempList[index];
			this.handlerButton(item);
		},

		async pageback() {
			let urll = `/pages/index/index`;
			uni.navigateTo({ url: urll });
		},
		async searchEvent() {
			if (this.search === '') {
				return false;
			} else {
				let urll = `/pages/search/search?search=${this.search}`;
				uni.navigateTo({ url: urll });
			}
		},
		async searchClearEvent() {
			this.search = '';
		},
		async getSite() {
			// document.write(JSON.stringify(mt));
			const res = await db.getAll('history');
			if (!res.flag) {
				this.blackstate = true;
				return;
			} else {
				this.blackstate = false;
			}
			if (res.flag) {
				for (let j = res.data.length - 1; j >= 0; j--) {
					this.list.push(res.data[j]);
				}
				for (let i of res.data) {
					let res1 = await db.get('site', i.name);
					if (res1.flag) {
						if (res1.data.id == 'XT') {
							let res2 = await http.getState(i.href, res1.data);
							if (res2.flag) {
								if (res2.data != []) {
									if (i.state != res2.data[0]) {
										i.state = res2.data[0];
										this.tempList.push(i);

										this.lunbolist.push({
											url: i.image,
											content: i.title + '———' + i.state
										});

										this.lunBo = true;
									}
								}
							}
						}
						if (res1.data.id == 'APP') {
							let res2 = await http.appstate(i.href, res1.data);
							if (res2.flag) {
								if (res2.data != []) {
									if (i.state != res2.data[0]) {
										i.state = res2.data[0];
										this.tempList.push(i);

										this.lunbolist.push({
											url: i.image,
											content: i.title + '———' + i.state
										});

										this.lunBo = true;
									}
								}
							}
						}
					}
				}
			} else {
				this.blackstate = true;
				uni.showToast({
					title: '读取视频源出错',
					type: 'warning',
					duration: '2300'
				});
				return false;
			}
		},
		async handlerButton(item) {
			this.tempList = [];
			this.lunbolist = [];
			this.lunBo = false;
			let targetHref = item.href;
			let targetImage = item.image;
			let targetTitle = item.title;
			let targetState = item.state;
			let targetUserState = item.userState;
			let targetName = item.name;
			let targetStar = this.notiveImage;
			const urll = `/pages/detail/detail?href=${targetHref}&image=${targetImage}&title=${targetTitle}&state=${targetState}&userState=${targetUserState}&name=${targetName}&star=${targetStar}`;
			uni.navigateTo({ url: urll });
			// uni.redirectTo({
			// 	url: urll
			// });
		}
	},
	onLoad() {
		this.list = [];
		this.getSite();
	},
	onShow() {
		this.list = [];
		this.tempList = [];
		this.lunbolist = [];
		this.lunBo = false;
		this.getSite();
	}
	// onTabItemTap() {
	// 	uni.setStorageSync('isRefresh', 0);
	// 	this.list=[]
	// 	this.getSite();
	// }
};
</script>

<style lang="scss" scoped>
.index {
}
.header {
	background-color: #ffffff;
	display: flex;
	position: sticky;
	top: 0px;
	z-index: 99;
	flex-direction: column;
	justify-content: space-between;

	.search-layout {
		height: 50px;
	}
	.search-text {
		height: 50px;
		margin-top: 15px;
		font-size: 20px;
		margin-right: 20px;
	}
}
.black-state {
	margin-left: 20px;
	margin-right: 20px;
	font-size: 20px;
	margin-top: 10px;
	margin-bottom: 10px;
	flex-wrap: wrap;
	justify-content: flex-start;
}
.lunbo {
	margin-top: 5px;
	font-size: 60px;
	margin-left: 20px;
	margin-right: 20px;
}
.data-item {
	margin-top: 10px;
	.out-item {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		.tui-list-item {
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			.item-img {
				height: 150px;
				width: 100px;
				margin-right: 20px;
				margin-left: 20px;
			}

			.item-box {
				width: 150px;
				display: flex;
				flex-direction: column;
				justify-content: space-around;
				margin-right: 20px;
			}

			.item-title {
				font-size: 20px;
			}
			.item-state {
				color: #999;
				font-size: 16px;
			}
			.item-userstate {
				color: #999;
				font-size: 16px;
			}
			.item-name {
				color: #999;
				font-size: 16px;
			}
		}
		.removeNotice {
			height: 30px;
			width: 30px;
			margin-top: 50px;
			margin-right: 10px;
		}
	}
}
</style>
