<template>
	<view class="detail">
		<view class="state">
			<view style="height: 40px;background-color: #FFFFFF;"></view>
			<view style="flex-direction: row;justify-content: space-between;">
				<uni-icons style="margin-left: 10px;" color="#000000" size="40" type="arrow-left" @click="pageBacked" />
				<view class="title" @click="nohideDetail()">播放</view>
				<uni-icons style="margin-right: 10px;" color="#000000" size="40" :type="downImage" @click="downvideo" />
			</view>
		</view>

		<view class="play" maxlength="300" v-if="hidePlay">
			<video
				id="myVideo"
				ref="myVideo"
				:object-fit="objectfit"
				class="player"
				:autoplay="true"
				:initial-time="initialtime"
				:vslide-gesture-in-fullscreen="volumecontrol"
				:codec="jiema"
				:src="url"
				:controls="showControl"
				vslide-gesture="true"
				enable-play-gesture="true"
				play-strategy="0"
				:header="Header"
				@error="changeWare()"
				show-loading="false"
				@ended="nextVideo"
				@fullscreenchange="enterFullScreen"
				@fullscreenclick="changeRatePlay"
				@controlstoggle="controlShow"
			>
				<!-- :title="nowPlay" -->
				<cover-view class="play-control" v-if="fullscreen && showControlshow && showControl">
					<text class="play-nowtime" @click="getNowTime">{{ nowtime }}</text>
					<text class="play-last" @click="lastVideo()">上一集</text>
					<text class="play-next" @click="nextVideo()">下一集</text>
					<text class="play-now">{{ nowPlay }}</text>
					<text class="play-rate" @click="changePlayRate()">速度:{{ String(playRate) }}</text>
					<text class="play-direction" @click="changeDirection()">旋转</text>
					<text class="play-choose" @click="changeshowplay">选集</text>
					<text class="play-choose" @click="changeobjectfit">{{ objectfittext }}</text>
				</cover-view>
				<cover-view class="body" v-if="showplay && showControlshow && fullscreen">
					<view class="tag-lists">
						<text class="play-nixu" @click="nixu">逆序</text>
						<view class="tag-data" v-for="(item, index) in tagLists" :key="index">
							<text class="play-item-title" :class="[current == index ? 'item-title-active' : '']" @click="tagChange(index)">{{ item.slice(0, 2) }}</text>
						</view>
					</view>
					<view class="play-lists">
						<view class="play-data" v-for="(item, index) in playList[0]" :key="index">
							<text class="play-playname" :class="[nowPlayNum == index ? 'playname-active' : '']" @click="playTrueUrl(index)">{{ item.slice(0, 25) }}</text>
						</view>
						<text class="playname"></text>
					</view>
				</cover-view>
			</video>
			<view style="margin-bottom: 5px;font-size: 20px;margin-top: 5px;margin-left: 20px;margin-right: 20px;display: flex;flex-direction: row;justify-content: space-between;">
				<text style="text-align:center;" @click="navigateUrl()">跳转浏览器</text>
				<text style="text-align:center;" @click="searchdev()">点击投屏</text>
			</view>
			<view v-for="dev in devList" :key="dev.id">
				<text style="font-size: 20px;text-align: center;margin-bottom: 10px;" @click="startdev(dev.id)">{{ dev.name }}</text>
			</view>
		</view>
		<view class="header">
			<view class="out-item">
				<image :src="image" mode="aspectFit" class="item-img"></image>
				<view class="item-box">
					<text class="item-title">{{ title }}</text>
					<text class="item-name">来源：{{ name }}</text>
					<text class="item-state">状态：{{ state }}</text>
					<text class="item-userstate">上次观看：{{ userState }}</text>
				</view>
			</view>
			<image :src="notiveImage" mode="aspectFit" class="removeNotice" @click="removeItem()"></image>
		</view>
		<view class="tag-lists">
			<text class="nixu" @click="nixu">逆序</text>
			<view class="tag-data" v-for="(item, index) in tagLists" :key="index">
				<text class="item-title" :class="[current == index ? 'item-title-active' : '']" @click="tagChange(index)">{{ item.slice(0, 2) }}</text>
			</view>
		</view>
		<list show-scrollbar="false">
			<cell class="play-lists">
				<view class="play-data" v-for="(item, index) in playList[0]" :key="index">
					<text class="playname" :class="[nowPlayNum == index ? 'playname-active' : '']" @click="playTrueUrl(index)">{{ item.slice(0, 25) }}</text>
				</view>
				<text class="playname"></text>
			</cell>
		</list>
	</view>
</template>
<script>
import db from '../../utils/database.js';
import http from '../../utils/request.js';
const dlna = uni.requireNativePlugin('JX-Dlna');
export default {
	data() {
		return {
			showplay: false,
			downImage: 'arrow-down',
			href: '',
			title: '',
			devList: [],
			isdevshow: false,
			volumecontrol: true,
			Header: {
				'User-Agent':
					'Mozilla/5.0 (Linux; Android 11; M2007J17C Build/RKQ1.200826.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/94.0.4606.85 Mobile Safari/537.36',
				Connection: 'keep-alive',
				'X-Requested-With': 'com.example.hikerview',
				'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',
				'Accept-Encoding': 'gzip, deflate',
				'Sec-Fetch-Site': 'same-site',
				'Sec-Fetch-Mode': 'cors',
				'Sec-Fetch-Dest': 'empty'
			},
			image: '',
			videoContext: null,
			videoTime: 0,
			state: '',
			showControl: true,
			showControlshow: false,
			userState: '',
			name: '',
			hideDetail: true,
			nowtime: '',
			notiveImage: '',
			hidePlay: false,
			url: '',
			initialtime: 0,
			// jiema: 'hardware',
			jiema: 'software',
			tagLists: [],
			playLists: [],
			playList: [],
			downList: [],
			fullscreen: false,
			playRate: 1.0,
			nowTag: '',
			current: 0,
			nowPlayNum: null,
			nowPlay: null,
			fullControlsWidth: null,
			fullControlsHeigt: null,
			direction: -90,
			objectfit: 'contain',
			objectfittext: '拉伸',
			siteid: 'XT',
			webv: 0
		};
	},
	onShow() {},
	created() {
		this.fullControlsWidth = uni.getSystemInfoSync().screenHeight;
		this.fullControlsHeigt = uni.getSystemInfoSync().screenWidth + 1;
		if (this.fullscreen && this.fullControlsHeigt > this.fullControlsWidth) {
			this.fullscreen = true;
			this.videoContext.requestFullScreen({
				direction: 0
			});
			this.direction = 0;
		}
	},
	methods: {
		startdev(id) {
			dlna.play({ id: id, url: this.url, title: this.nowPlay }, result => {
				console.log(result.msg);
				// this.title = result.msg
			});
		},
		changeobjectfit() {
			if (this.objectfit == 'contain') {
				this.objectfittext = '还原';
				this.objectfit = 'fill';
			} else {
				this.objectfittext = '拉伸';
				this.objectfit = 'contain';
			}
		},
		searchdev() {
			this.devList = [];
			dlna.search(result => {
				//alert(result.type)
				if (result.type === 'add') {
					this.devList.push({ id: result.id, name: result.name });
				} else {
					this.devList = this.devList.filter(x => x.id != result.id);
				}
			});
		},
		changeshowplay() {
			this.showplay = !this.showplay;
			if (this.showplay) {
				this.volumecontrol = false;
			} else {
				this.volumecontrol = true;
			}
		},
		controlShow(e) {
			this.showControlshow = e.detail.show;
			if (this.showControlshow) {
				this.getNowTime();
			} else {
				this.showplay = false;
				this.volumecontrol = true;
			}
		},
		getNowTime() {
			var now = new Date();
			var hh = now.getHours(); //时
			if (hh < 10) hh = '0' + hh;
			var mm = now.getMinutes(); //分
			if (mm < 10) mm = '0' + mm;
			this.nowtime = `${hh}:${mm}`;
		},
		changePlayRate() {
			if (this.playRate == 1.0) {
				this.videoContext.playbackRate(1.25);
				this.playRate = 1.25;
				return;
			}
			if (this.playRate == 1.25) {
				this.videoContext.playbackRate(1.5);
				this.playRate = 1.5;
				return;
			}
			if (this.playRate == 1.5) {
				this.videoContext.playbackRate(2.0);
				this.playRate = 2.0;
				return;
			}
			if (this.playRate === 2.0) {
				this.videoContext.playbackRate(1.0);
				this.playRate = 1.0;

				return;
			}
		},
		changeDirection() {
			this.videoContext.exitFullScreen();
			if (this.fullControlsWidth > this.fullControlsHeigt) {
				if (this.direction == 90) {
					this.videoContext.requestFullScreen({
						direction: -90
					});
					this.direction = -90;
					plus.navigator.setFullscreen(true);
				} else {
					this.videoContext.requestFullScreen({
						direction: 90
					});
					this.direction = 90;
					plus.navigator.setFullscreen(true);
				}
			} else {
				this.fullscreen = true;
				this.videoContext.requestFullScreen({
					direction: 0
				});
				this.direction = 0;
				plus.navigator.setFullscreen(true);
			}
		},
		nixu() {
			let temp = this.playList;
			this.playList = [[], []];
			let tempLen = temp[0].length;
			for (let i = 0; i < tempLen; i++) {
				this.playList[0].push(temp[0][tempLen - i - 1]);
				this.playList[1].push(temp[1][tempLen - i - 1]);
			}
		},
		promise(time = 0) {
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					resolve();
				}, time);
			});
			return promise;
		},
		changeRatePlay(e) {
			var clickW = e.detail.screenX;
			var clickH = e.detail.screenY;
			if (this.playRate == 1.0 && 8 * clickW > 7 * this.fullControlsWidth && 5 * clickH > 2 * this.fullControlsHeigt && 5 * clickH < 4 * this.fullControlsHeigt) {
				this.videoContext.playbackRate(2.0);
				this.playRate = 2.0;
				this.showControl = false;
			} else {
				if (this.playRate != 1.0 && 8 * clickW > 7 * this.fullControlsWidth && 5 * clickH > 2 * this.fullControlsHeigt && 5 * clickH < 4 * this.fullControlsHeigt) {
					this.videoContext.playbackRate(1.0);
					this.playRate = 1.0;
					this.showControl = false;
				} else {
					this.showControl = !this.showControl;
				}
			}
		},
		enterFullScreen() {
			this.fullscreen = !this.fullscreen;
			if (this.fullscreen) {
				plus.navigator.setFullscreen(true);
			} else {
				plus.navigator.setFullscreen(false);
			}
		},
		navigateUrl() {
			this.videoContext.pause();
			plus.runtime.openURL(
				this.url,
				err => {
					uni.setClipboardData({
						data: this.url,
						success: function() {
							uni.showToast({
								title: '复制成功！',
								duration: 2000
							});
						},
						fail: function(err) {
							uni.showToast({
								title: '复制失败！',
								duration: 2000
							});
						}
					});
				},
				'com.tencent.mtt'
			);
		},
		changeWare() {
			if (this.jiema === 'software') {
				this.jiema = 'hardware';
			} else {
				uni.showToast({
					title: '播放失败！',
					duration: 2000
				});
			}
		},
		nextVideo() {
			if (this.nowPlayNum + 1 < this.playList[0].length) {
				this.playRate = 1.0;
				this.playTrueUrl(Number(this.nowPlayNum + 1));
			} else {
				uni.showToast({
					title: '最后一集啦！',
					duration: 2300
				});
			}
		},
		lastVideo() {
			if (this.nowPlayNum > 0) {
				this.playRate = 1.0;
				this.playTrueUrl(Number(this.nowPlayNum - 1));
			} else {
				uni.showToast({
					title: '第一集啦！',
					duration: 2300
				});
			}
		},
		downvideo() {
			if (this.downImage == 'arrow-down') {
				this.downImage = 'arrow-up';
			} else {
				this.downImage = 'arrow-down';
				var allDown = uni.getStorageSync('downLists');
				if (allDown == []) {
					uni.setStorageSync('downLists', this.downList);
					uni.switchTab({
						url: `/pages/download/download`
					});
				} else {
					uni.setStorageSync('downLists', [...allDown, ...this.downList]);
				}
				uni.redirectTo({
					url: `/pages/download/download`
				});
			}
		},
		async tagChange(index) {
			this.current = index;
			this.playList = this.playLists[index];
			this.nowTag = this.tagLists[index];
		},
		async getPlayData(url, name) {
			let res = await db.get('site', name);
			if (res.flag) {
				if (res.data.exceptstring.length != 0) {
					uni.setStorageSync('matchRule', res.data.exceptstring);
				} else {
					uni.setStorageSync('matchRule', '!!!!!');
				}
				if (res.data.id == 'XT') {
					let res1 = await http.getPlayData(url, res.data);
					this.playList = res1.data[1][0];
					this.playLists = res1.data[1];
					this.tagLists = res1.data[0];
					this.nowTag = this.tagLists[0];
				}
				if (res.data.id == 'APP') {
					this.siteid = 'APP';
					let res1 = await http.appPlayData(url, res.data);
					this.playList = res1.data[1][0];
					this.playLists = res1.data[1];
					this.tagLists = res1.data[0];
					this.nowTag = this.tagLists[0];
				}
			} else {
				uni.showToast({ title: '视频源出错', type: 'warning', duration: '2300' });
				return false;
			}
		},
		pageBacked() {
			this.videoContext.stop();
			uni.navigateBack();
		},
		async playTrueUrl(index) {
			this.videoContext.pause();
			if (this.downImage == 'arrow-down') {
				this.setHistory(this.playList[0][index]);
				this.nowPlay = this.playList[0][index];
				this.nowPlayNum = index;
				if (this.siteid == 'XT') {
					this.getPlayUrl(this.playList[1][index]);
				}
				if (this.siteid == 'APP') {
					this.url = await http.appTureUrl(this.playList[1][index]);
					if (this.url && this.url.startsWith('http')) {
						if (this.url.indexOf('url=') > -1) {
							this.getPlayUrl(this.url);
						} else {
							let that = this;
							setTimeout(function() {
								that.hidePlay = true;
								that.videoContext.play();
							}, 500);
						}
					} else {
						uni.showToast({
							title: '链接已失效!',
							duration: 1000
						});
					}
				}
			} else {
				this.url = '';
				this.hideDetail = true;
				this.hidePlay = false;
				for (var data of this.downList) {
					if (data[0] == this.playList[0][index] && data[2] == this.nowTag && data[3] == this.name && data[4] == this.title) {
						uni.showToast({
							title: '已添加过该集',
							duration: 800
						});
						return;
					}
				}
				this.downList.push([this.playList[0][index], this.playList[1][index], this.nowTag, this.name, this.title, '开始', uni.getStorageSync('matchRule')]);
				uni.showToast({
					title: this.playList[0][index] + '添加成功',
					duration: 500
				});
			}
		},
		async setHistory(name) {
			let key = this.name + '@@' + this.href;
			await db.remove('history', key);
			let item = {
				name: this.name,
				href: this.href,
				title: this.title,
				image: this.image,
				state: this.state,
				userState: name,
				targetStar: this.notiveImage
			};
			await db.addNotive('history', item);
			let res = await db.getAllDB('history');
			if (res.flag) {
				if (res.data.length > 50) {
					await db.remove('notive', res.data[0]);
				}
			}
			if (this.notiveImage == '../../static/star.png') {
				await db.remove('notive', key);
				await db.addNotive('notive', item);
				uni.setStorageSync('isRefresh', 1);
			}
		},
		getPlayUrl(url) {
			uni.showToast({
				title: '嗅探中...',
				duration: 30000,
				icon: 'loading'
			});
			uni.setStorageSync('urlPlay', '');
			this.webv.loadURL(url);
			var wv = this.webv;
			// wv.overrideUrlLoading({ mode: 'reject' }, function(e) {});
			wv.overrideUrlLoading({ mode: 'allow', match: '.*(mp4|m3u8|flv|url=).*' }, function(e) {});
			wv.listenResourceLoading({ match: '.*(mp4|m3u8|flv).*' }, function(e) {
				var matchRule = uni.getStorageSync('matchRule');
				if (
					e.url.indexOf('?url=') == -1 &&
					e.url.indexOf('beiyong') == -1 &&
					e.url.indexOf('SVG') == -1 &&
					e.url.indexOf('update') == -1 &&
					e.url.indexOf('51.la/') == -1 &&
					!e.url.endsWith('.js') &&
					e.url.indexOf('.png') == -1 &&
					e.url.indexOf('.css') === -1 &&
					e.url.indexOf('gif') === -1 &&
					e.url.indexOf('.php') == -1 &&
					!e.url.endsWith('.jpg') &&
					e.url.indexOf(matchRule) === -1 &&
					e.url.indexOf('umuuid') == -1
				) {
					console.log(e.url);
					uni.setStorageSync('urlPlay', e.url);
				}
			});
			let that = this;
			let alltime = 0;
			var obj = setInterval(function() {
				var urlPlay = uni.getStorageSync('urlPlay');
				alltime = alltime + 2000;
				if (alltime < 20000 && urlPlay != '') {
					uni.hideToast();
					that.url = urlPlay;
					that.hidePlay = true;
					that.videoContext.play();
					that.webv.pause();
					that.webv.stop();
					clearInterval(obj);
				}
				if (alltime > 20000) {
					uni.hideToast();
					uni.showToast({
						title: '嗅探超时！',
						duration: 1000
					});
					that.webv.pause();
					that.webv.stop();
					clearInterval(obj);
				}
			}, 2000);
		},
		async removeItem() {
			if (this.notiveImage == '../../static/star.png') {
				let key = this.name + '@@' + this.href;
				await db.remove('notive', key);
				this.notiveImage = '../../static/star1.png';
			} else {
				this.notiveImage = '../../static/star.png';
				let item = {
					name: this.name,
					href: this.href,
					title: this.title,
					image: this.image,
					state: this.state,
					userState: this.userState
				};
				await db.addNotive('notive', item);
			}
		}
	},
	onLoad: function(option) {
		this.href = option.href;
		this.title = option.title;
		this.image = option.image;
		this.state = option.state;
		this.userState = option.userState;
		this.name = option.name;
		this.notiveImage = option.star;
		this.initialtime = uni.getStorageSync('initialtime');
		if (!this.initialtime) {
			this.initialtime = 0;
			uni.setStorageSync('initialtime', 0);
		}
		this.getPlayData(option.href, option.name);
	},
	onReady: function() {
		this.videoContext = uni.createVideoContext('myVideo', this);
		this.webv = plus.webview.create('', 'custom-webview', {
			plusrequire: 'none', //禁止远程网页使用plus的API，有些使用mui制作的网页可能会监听plus.key，造成关闭页面混乱，可以通过这种方式禁止
			'uni-app': 'none', //不加载uni-app渲染层框架，避免样式冲突
			disablePlus: true,
			hardwareAccelerated: true,
			blockNetworkImage: true
		});
		var currentWebview = this.$scope.$getAppWebview();
		currentWebview.append(this.webv);
	},
	onUnload: function() {
		this.videoContext.pause();
		this.hidePlay = false;
		plus.navigator.setFullscreen(false);
		this.webv.close();
		let currentWebview = this.$mp.page.$getAppWebview();
		currentWebview.close();
	}
};
</script>
<style lang="scss" scoped>
.detail {
	.state {
		position: sticky;
		top: 0px;
		z-index: 99;
		display: flex;
		background-color: #ffffff;
		flex-direction: column;
		.title {
			margin-top: 8px;
			font-size: 20px;
		}
	}
	.play {
		.player {
			margin-top: 5px;
			margin-bottom: 5px;
			.play-control {
				display: flex;
				flex-direction: row;
				justify-content: space-around;
				color: #ffffff;
				margin-top: 13x;
				margin-left: 40px;
			}
			.play-choose {
				color: #ffffff;
			}
			.play-nowtime {
				color: #ffffff;
			}
			.play-last {
				color: #ffffff;
			}
			.play-next {
				color: #ffffff;
			}
			.play-now {
				color: #ffffff;
			}
			.play-rate {
				color: #ffffff;
			}
			.play-direction {
				color: #ffffff;
			}
		}
	}
	.header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		.out-item {
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			.item-img {
				height: 150px;
				width: 100px;
				margin-right: 20px;
				margin-left: 20px;
			}
			.item-box {
				width: 170px;
				display: flex;
				flex-direction: column;
				justify-content: space-around;
				.item-title {
					font-size: 20px;
				}
				.item-state {
					color: #999;
					font-size: 16px;
					display: flex;
				}
				.item-userstate {
					color: #999;
					font-size: 16px;
				}
				.item-name {
					color: #999;
					font-size: 16px;
				}
			}
		}
		.removeNotice {
			height: 30px;
			width: 30px;
			margin-top: 50px;
			margin-right: 20px;
		}
	}
	.tag-lists {
		margin-left: 20px;

		display: flex;
		flex-direction: row;
		margin-top: 10px;
		margin-bottom: 10px;
		flex-wrap: wrap;
		.play-nixu {
			justify-content: center;
			margin-top: 10px;
			color: #ffffff;
			margin-right: 20px;
			font-size: 20px;
		}
		.nixu {
			justify-content: center;
			margin-top: 10px;

			margin-right: 20px;
			font-size: 20px;
		}
		.play-item-title {
			margin-left: 10px;
			color: #ffffff;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			flex-wrap: wrap;
		}
		.item-title {
			margin-left: 10px;
			color: #000;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			flex-wrap: wrap;
		}
		.item-title-active {
			color: #00aa00;
			flex-wrap: wrap;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			margin-left: 10px;
		}
	}
	.play-playname {
		margin-top: 10px;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		flex: 1;
		font-size: 20px;
		flex-wrap: wrap;
		color: #ffffff;
	}
	.play-lists {
		display: flex;
		flex-direction: row;
		margin-bottom: 50px;
		margin-left: 10px;
		margin-right: 10px;
		flex-wrap: wrap;
		align-items: center;
		justify-content: space-between;
	}
	.playname {
		margin-top: 10px;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		flex: 1;
		font-size: 20px;
		flex-wrap: wrap;
	}
	.playname-active {
		margin-top: 10px;
		flex: 1;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		font-size: 20px;
		color: #00aa00;
		flex-wrap: wrap;
	}
}
</style>














<template>
	<view class="download">
		<view class="header">
			<view style="height: 40px;background-color: #FFFFFF;"></view>
			<view style="flex-direction: row;justify-content: center;background-color: #FFFFFF;"><text class="head" style="justify-content: center;">下载</text></view>
		</view>
		<view class="play" maxlength="300" v-if="hidePlay"><video id="myVideo" ref="myVideo" :autoplay="true" :src="url" play-strategy="0"></video></view>
		<view class="body">
			<view class="tag-data" v-for="(item, index) in downloadLists" :key="index">
				<view class="out-item">
					<view class="item-box" @click="playvideo(index)">
						<text class="item-title">{{ item[4] }}-{{ item[0] }}</text>
						<text class="item-name">来源：{{ item[3] }}-{{ item[2] }}</text>
					</view>

					<view class="item-state">
						<view class="down-state">{{ index == nowDownNum ? progress : item[5] }}</view>
						<image :src="removeImage" mode="aspectFit" class="removeNotice" @click="removeItem(index)"></image>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
export default {
	data() {
		return {
			url: '',
			videoContext: null,
			hidePlay: false,
			nowDown: 0, //当前下载的视频
			nowDownNum: -1, //当前下载的序号
			downloadLists: [],
			numLen: 0, //m3u8长度
			hasDownNum: 0, //已经下载的长度
			hasDown: [], //已经下载完成的片段路径
			progress: '嗅探中...',
			removeImage: '../../static/delete.png',
			data: [], //m3u8片段信息
			webv: 0
		};
	},
	methods: {
		playvideo(index) {
			this.videoContext.pause();
			if (this.downloadLists[index][5] != '已完成') {
				uni.showToast({
					title: '该集未下载！',
					duration: 2000
				});
			} else {
				this.url = this.downloadLists[index][7];
				this.hidePlay = true;
				this.videoContext.play();
			}
		},
		async startDown() {
			this.preitem();
		},
		//删除项目
		removeItem(item) {
			if (this.downloadLists[item][5] != '已完成') {
				let that = this;
				setTimeout(function() {
					console.log(that.downloadLists.splice(item, 1));
					uni.setStorageSync('downLists', that.downloadLists);
				}, 1000);
			} else {
				for (let localpath of this.downloadLists[item][8]) {
					uni.removeSavedFile({
						filePath: localpath,
						complete: function(res) {
							console.log(res);
						}
					});
				}
				this.downloadLists.splice(item, 1);
				uni.setStorageSync('downLists', this.downloadLists);
			}
		},
		//更新下载列表
		updateItem() {
			this.downloadLists.splice(this.nowDownNum, 1);
			this.downloadLists.push(this.nowDown);
			uni.setStorageSync('downLists', this.downloadLists);

			for (let i = 0; i < this.downloadLists.length; i++) {
				let item = this.downloadLists[i];
				if (item[5] != '已完成') {
					this.startDown();
					return;
				}
			}
		},
		//开始下载
		async preitem() {
			for (let i = 0; i < this.downloadLists.length; i++) {
				let item = this.downloadLists[i];
				if (item[5] != '已完成') {
					item[5] = '下载中';

					this.nowDown = item;
					this.nowDownNum = i;
					this.getPlayUrl(item[1], item[6]);
					return;
				}
			}
		},
		//判断m3u8还是MP4，删除上次中断的残留
		gethHefRes(url) {
			if (this.hasDownNum != 0) {
				for (let localpath of this.hasDown) {
					uni.removeSavedFile({
						filePath: localpath,
						complete: function(res) {
							console.log(res);
						}
					});
				}
			}
			this.hasDown = [];
			this.progress = '解析中...';
			this.numLen = 0;
			this.hasDownNum = 0;
			this.data = [];
			if (url.indexOf('mp4') != -1) {
				this.downMP4(url);
			} else {
				let that = this;
				console.log(url);
				uni.request({
					url: url,
					method: 'GET',
					timeout: 10000,
					success(res) {
						that.getDownUrl(res, '', res.header);
					},
					fail(res) {
						console.log(res);
					}
				});
			}
		},
		//获取m3u8片段信息
		async getDownUrl(res, host, header) {
			let num = 0;
			let urlNum = 0;
			var arr = res.data.split('\n');
			for (let line of arr) {
				line = line.trim();
				if (line == '') {
					continue;
				}
				if (line.startsWith('#EXT')) {
					this.data.push(line);
					num = num + 1;
				} else {
					if (line.startsWith('/')) {
						var url = host + line;
					}
					if (line.indexOf('://') != -1) {
						var url = line;
					}
					this.downFile(url, num, header);
					this.data.push(url);
					num = num + 1;
					urlNum = urlNum + 1;
				}
			}
			this.numLen = urlNum;
		},
		//下载m3u8片段
		async downFile(url, num, header) {
			let that = this;
			const downloadTask = uni.downloadFile({
				url: url,
				header: header,
				timeout: 15,
				success: res => {
					that.hasDownNum = that.hasDownNum + 1;
					that.progress = `${that.hasDownNum}/${that.numLen}`;
					if (res.statusCode == 200) {
						uni.saveFile({
							tempFilePath: res.tempFilePath,
							success: function(res) {
								that.data[num] = res.savedFilePath;
								that.hasDown.push(res.savedFilePath);
							}
						});
					}
					if (that.hasDownNum == that.numLen) {
						that.progress = '已完成';
						that.nowDown[5] = '已完成';
						that.writeFile();
					}
				},
				fail: () => {
					that.hasDownNum = that.hasDownNum + 1;
					that.progress = `${that.hasDownNum}/${that.numLen}`;
					if (that.hasDownNum == that.numLen) {
						that.progress = '已完成';
						that.nowDown[5] = '已完成';
						that.writeFile();
					}
				}
			});
		},
		//下载MP4
		async downMP4(url) {
			let that = this;
			const downloadTask = uni.downloadFile({
				url: url,
				success: res => {
					if (res.statusCode === 200) {
						that.progress = '已完成';
						uni.saveFile({
							tempFilePath: res.tempFilePath,
							success: function(res) {
								console.log(that.nowDown);
								that.nowDown[5] = '已完成';
								that.nowDown.push(res.savedFilePath);
								that.nowDown.push([res.savedFilePath]);

								that.updateItem();
							},
							fail: () => {
								that.nowDown[5] = '下载失败';

								that.updateItem();
							}
						});
					} else {
						that.nowDown[5] = '下载失败';

						that.updateItem();
					}
				},
				fail: () => {
					that.nowDown[5] = '下载失败';

					that.updateItem();
				}
			});

			downloadTask.onProgressUpdate(res => {
				that.progress = `${res.progress}%`;
			});
		},
		writeFile() {
			let text = '';
			for (let line of this.data) {
				text = text + line + '\n';
			}
			plus.io.requestFileSystem(plus.io.PRIVATE_DOC, function(fobject) {
				// fs.root是根目录操作对象DirectoryEntry
				fobject.root.getDirectory(
					'_doc/',
					{
						create: true
					},
					function(fileEntry) {
						console.log(fileEntry.toLocalURL());
					}
				);
			});
			let that = this;
			plus.io.requestFileSystem(plus.io.PRIVATE_DOC, function(fobject) {
				// fs.root是根目录操作对象DirectoryEntry
				fobject.root.getFile(
					'_doc/' + that.nowDown[1].replace(RegExp('/', 'g'), '-') + '.m3u8',
					{
						create: true
					},
					function(fileEntry) {
						console.log(fileEntry.toLocalURL());
						that.nowDown.push(fileEntry.toLocalURL());
						that.nowDown.push(that.hasDown);
						that.hasDown = [];
						that.hasDownNum = 0;

						that.updateItem();

						fileEntry.createWriter(
							function(writer) {
								writer.seek(0);
								writer.write(text);
							},
							function(e) {}
						);
					},
					function(e) {
						console.log(e);
					}
				);
			});
		},
		getPlayUrl(url, key) {
			uni.setStorageSync('urlPlay', '');
			this.webv.loadURL(url);
			var wv = this.webv;
			wv.overrideUrlLoading({ mode: 'allow', match: '.*(mp4|flv|m3u8|url=).*' }, function(e) {});
			// 监听到页面加载图片资源时显示（{match:'.*\.(jpg|png|jpeg|bmp)\b'}）
			wv.listenResourceLoading({ match: '.*(mp4|video|m3u8).*' }, function(e) {
				var matchRule = key;
				if (
					e.url.indexOf('?url=') == -1 &&
					e.url.indexOf('beiyong') == -1 &&
					e.url.indexOf('SVG') == -1 &&
					e.url.indexOf('update') == -1 &&
					e.url.indexOf('51.la/') == -1 &&
					!e.url.endsWith('.js') &&
					e.url.indexOf('.png') == -1 &&
					e.url.indexOf('.css') === -1 &&
					e.url.indexOf('gif') === -1 &&
					e.url.indexOf('.php') == -1 &&
					!e.url.endsWith('.jpg') &&
					e.url.indexOf(matchRule) === -1 &&
					e.url.indexOf('umuuid') == -1
				) {
					uni.setStorageSync('urlPlay', e.url);
					wv.close();
				}
			});
			let that = this;
			let alltime = 0;
			var obj = setInterval(function() {
				var urlPlay = uni.getStorageSync('urlPlay');
				alltime = alltime + 2000;

				if (alltime < 60000 && urlPlay != '') {
					that.gethHefRes(urlPlay);
					that.webv.pause();
					that.webv.stop();
					clearInterval(obj);
				}
				if (alltime > 60000) {
					that.nowDown[5] = '嗅探失败';
					that.updateItem();
					that.webv.pause();
					that.webv.stop();
					clearInterval(obj);
				}
			}, 2000);
		}
	},
	onLoad() {
		this.downloadLists = uni.getStorageSync('downLists');
		this.startDown();
	},
	onReady: function() {
		this.videoContext = uni.createVideoContext('myVideo', this);
		this.webv = plus.webview.create('', 'custom-webview', {
			plusrequire: 'none', //禁止远程网页使用plus的API，有些使用mui制作的网页可能会监听plus.key，造成关闭页面混乱，可以通过这种方式禁止
			'uni-app': 'none', //不加载uni-app渲染层框架，避免样式冲突
			disablePlus: true,
			hardwareAccelerated: true,
			blockNetworkImage: true
		});
		var currentWebview = this.$scope.$getAppWebview();
		currentWebview.append(this.webv);
	},
	onUnload: function() {
		this.videoContext.pause();
		this.hidePlay = false;
		plus.navigator.setFullscreen(false);
		this.webv.close();
		let currentWebview = this.$mp.page.$getAppWebview();
		currentWebview.close();
	}
};
</script>

<style lang="scss" scoped>
.download {
	.header {
		display: flex;
		flex-direction: column;
		justify-content: center;
		position: sticky;
		top: 0px;
		z-index: 99;
	}
	.tab-data {
		margin-top: 20px;
		display: flex;
		flex-direction: row;
		justify-content: space-around;
	}
	.tab-item {
		font-size: 20px;
		color: #000;

		margin-bottom: 10px;
	}
	.tab-item-active {
		font-size: 20px;
		color: #00aa00;

		margin-bottom: 10px;
	}
	.tag-data {
		margin-top: 20px;
	}
	.out-item {
		display: flex;
		margin-left: 20px;
		margin-right: 20px;
		flex-direction: row;
		justify-content: space-between;
	}
	.item-state {
		margin-top: 10px;
		margin-left: 25px;
		display: flex;
		flex-direction: row;
		justify-content: center;
	}
	.item-box {
		display: flex;
		flex-direction: column;
		justify-content: space-around;
	}

	.item-title {
		font-size: 20px;
	}

	.item-name {
		color: #999;
		font-size: 16px;
	}
	.down-state {
		font-size: 20px;
	}
	.removeNotice {
		margin-left: 20px;
		height: 30px;
		width: 35px;
		margin-bottom: 20px;
	}
}
</style>
