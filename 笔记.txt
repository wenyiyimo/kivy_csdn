https://github.com/bwsnb/Free-Font 免费中文字体
https://github.com/zenozeng/Free-Chinese-Fonts 免费中文字体
https://github.com/shmily-yu/uniappLearn uniapp教程
https://github.com/xieyushi/uniappwebviewconnect webview uniapp通讯
https://github.com/zz694818748/uniapp-APP-m3u8  m3u8 下载
https://github.com/sewenfengqing/uniapp-NotificationProgress 下载进度条
https://github.com/deepsearun/uniapp-applecms-movies/blob/main/pages/download/download.vue 下载模板

https://github.com/clearlove2303/lzg-uniapp/blob/6d0d9825dd5e6617a7a90e9f5f8359d077c3eff5/common/download-util.js 下载

https://github.com/512541024/-/blob/f33bb505def3d0534c048a94324855f33a5697c1/components/yfs-video/yfs-video.vue
https://github.com/xzebin/my-music/blob/614ff9ca97f939431190d291781a66b136fdb901/components/shoyu-video/shoyu-video.vue
https://github.com/WanyueKJ/wanyue_online_education_uniapp/blob/cc64f122fe3ee5774510420fcb7847f3fd2cbc69/packageB/pages/content-detail/content-detail.vue
https://github.com/minyuanriji/wwwfrontend/blob/cc5eb9abb3957a3ab1f6cca94632b27e92d34cb4/components/com-video/com-video.vue
https://github.com/MIchaelJier/Yunyun-Study-for-Mobile/blob/0ad3da48e6ea3d9507a5b8a6468bce3bd6fec377/pages/Coursedetails/video/myVideo.vue



<template>
	<view class="detail">
		<view class="state">
			<view style="height: 40px;background-color: #FFFFFF;"></view>
			<view style="flex-direction: row;justify-content: space-between;">
				<image src="../../static/back.png" mode="aspectFit" class="back-img" @click="pageBacked()"></image>
				<view class="title" @click="nohideDetail()">播放</view>
				
				<image :src="downImage" mode="aspectFit" class="downPlay" @click="downvideo()"></image>
			</view>
		</view>

		<view class="play" maxlength="300" v-if="hidePlay">
			<video
				id="myVideo"
				ref="myVideo"
				:duration="videoTime"
				class="player"
				autoplay="false"
				:codec="jiema"
				:src="url"
				vslide-gesture="true"
				enable-play-gesture="true"
				:initial-time="initialtime"
				play-strategy="3"
				:header="Header"
				@error="changeWare()"
				@ended="nextVideo"
				@fullscreenchange="enterFullScreen"
				@fullscreenclick="changeRatePlay"
				@controlstoggle="controlShow"
				@loadedmetadata="getVideoTime"
			>
				<!-- :title="nowPlay" -->
				<cover-view class="play-control" v-if="fullscreen && showControl">
					<text class="play-last" @click="lastVideo()">上一集</text>
					<text class="play-next" @click="nextVideo()">下一集</text>
					<text class="play-now">{{ nowPlay }}</text>
					<text class="play-rate" @click="changePlayRate()">速度:{{ String(playRate) }}</text>
					<text class="play-direction" @click="changeDirection()">旋转</text>
				</cover-view>
			</video>
			<button class="goWeb" @click="navigateUrl()">跳转浏览器播放</button>
		</view>
		<view class="header">
			<view class="out-item">
				<image :src="image" mode="aspectFit" class="item-img"></image>
				<view class="item-box">
					<text class="item-title">{{ title }}</text>
					<text class="item-name">来源：{{ name }}</text>
					<text class="item-state">状态：{{ state }}</text>
					<text class="item-userstate">上次观看：{{ userState }}</text>
				</view>
			</view>
			<image :src="notiveImage" mode="aspectFit" class="removeNotice" @click="removeItem()"></image>
		</view>
		<view class="tag-lists">
			<text class="nixu" @click="nixu">逆序</text>
			<view class="tag-data" v-for="(item, index) in tagLists" :key="index">
				<text class="item-title" :class="[current == index ? 'item-title-active' : '']" @click="tagChange(index)">{{ item.slice(0, 2) }}</text>
			</view>
		</view>
		<view class="play-lists">
			<view class="play-data" v-for="(item, index) in playList[0]" :key="index">
				<text class="playname" :class="[nowPlayNum == index ? 'playname-active' : '']" @click="playTrueUrl(index)">{{ item.slice(0, 25) }}</text>
			</view>
			<text class="playname"></text>
		</view>
	</view>
</template>
<script>
import db from '../../utils/database.js';
import http from '../../utils/request.js';
// import '../../utils/uni-webview.js'
export default {
	data() {
		return {
			downImage: '../../static/down.png',
			href: '',
			title: '',
			Header: {
				'User-Agent':
					'Mozilla/5.0 (Linux; Android 11; M2007J17C Build/RKQ1.200826.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/94.0.4606.85 Mobile Safari/537.36',
				Connection: 'keep-alive',
				'X-Requested-With': 'com.example.hikerview',
				'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',
				'Accept-Encoding': 'gzip, deflate',
				'Sec-Fetch-Site': 'same-site',
				'Sec-Fetch-Mode': 'cors',
				'Sec-Fetch-Dest': 'empty'
			},
			image: '',
			videoContext: null,
			videoTime:0,
			state: '',
			userState: '',
			name: '',
			hideDetail: true,
			notiveImage: '',
			hidePlay: false,
			url: '',
			initialtime: 0,
			// jiema: 'hardware',
			jiema: 'software',
			tagLists: [],
			playLists: [],
			playList: [],
			downList: [],
			fullscreen: false,
			playRate: 1.0,
			nowTag: '',
			current: 0,
			nowPlayNum: null,
			nowPlay: null,
			fullControlsWidth: null,
			fullControlsHeigt: null,
			direction: -90,
			showControl: false,
			siteid: 'XT',
			webv:0
		};
	},
	created() {
		this.fullControlsWidth = uni.getSystemInfoSync().screenHeight;
		this.fullControlsHeigt = uni.getSystemInfoSync().screenWidth + 1;
		if (this.fullscreen && this.fullControlsHeigt > this.fullControlsWidth) {
			this.fullscreen = true;
			this.videoContext.requestFullScreen({
				direction: 0
			});
			this.direction = 0;
		}
	},
	methods: {
		async getVideoTime(e){
			this.videoTime=e.duration;
			this.videoContext.play();
		},
		changePlayRate() {
			if (this.playRate == 1.0) {
				this.videoContext.playbackRate(1.5);
				this.playRate = 1.5;
				return;
			}
			if (this.playRate == 1.5) {
				this.videoContext.playbackRate(2.0);
				this.playRate = 2.0;
				return;
			}
			if (this.playRate === 2.0) {
				this.videoContext.playbackRate(1.0);
				this.playRate = 1.0;

				return;
			}
		},
		changeDirection() {
			this.videoContext.exitFullScreen();
			if (this.fullControlsWidth > this.fullControlsHeigt) {
				if (this.direction == 90) {
					this.videoContext.requestFullScreen({
						direction: -90
					});
					this.direction = -90;
					plus.navigator.setFullscreen(true);
				} else {
					this.videoContext.requestFullScreen({
						direction: 90
					});
					this.direction = 90;
					plus.navigator.setFullscreen(true);
				}
			} else {
				this.fullscreen = true;
				this.videoContext.requestFullScreen({
					direction: 0
				});
				this.direction = 0;
				plus.navigator.setFullscreen(true);
			}
		},
		controlShow(e) {
			this.showControl = e.detail.show;
		},
		nixu() {
			let temp = this.playList;
			this.playList = [[], []];
			let tempLen = temp[0].length;
			for (let i = 0; i < tempLen; i++) {
				this.playList[0].push(temp[0][tempLen - i - 1]);
				this.playList[1].push(temp[1][tempLen - i - 1]);
			}
		},
		changeRatePlay(e) {
			var clickW = e.detail.screenX;
			var clickH = e.detail.screenY;
			if (this.playRate == 1.0 && 8 * clickW > 7 * this.fullControlsWidth && 5 * clickH > 2 * this.fullControlsHeigt && 5 * clickH < 4 * this.fullControlsHeigt) {
				this.videoContext.playbackRate(2.0);
				this.playRate = 2.0;
			} else {
				if (this.playRate != 1.0 && 8 * clickW > 7 * this.fullControlsWidth && 5 * clickH > 2 * this.fullControlsHeigt && 5 * clickH < 4 * this.fullControlsHeigt) {
					this.videoContext.playbackRate(1.0);
					this.playRate = 1.0;
				}
				if (6 * clickW < this.fullControlsWidth && this.fullControlsHeigt / 6 < clickH && clickH < this.fullControlsHeigt / 3) {
					this.lastVideo();
					console.log('last');
				} else {
					if (6 * clickW < this.fullControlsWidth && this.fullControlsHeigt * 2 < 3 * clickH && 6 * clickH < this.fullControlsHeigt * 5) {
						this.nextVideo();
						console.log('next');
					}
				}
			}
		},

		enterFullScreen() {
			this.fullscreen = !this.fullscreen;
			if (this.fullscreen) {
				plus.navigator.setFullscreen(true);
			} else {
				plus.navigator.setFullscreen(false);
			}
		},

		navigateUrl() {
			this.videoContext.pause();
			plus.runtime.openURL(
				this.url,
				err => {
					uni.setClipboardData({
						data: this.url,
						success: function() {
							uni.showToast({
								title: '复制成功！',
								duration: 2000
							});
						},
						fail: function(err) {
							uni.showToast({
								title: '复制失败！',
								duration: 2000
							});
						}
					});
				},
				'com.tencent.mtt'
			);
		},

		changeWare() {
			if (this.jiema === 'software') {
				this.$refs.uToast.show({ title: '视频源出错', type: 'warning', duration: '2300' });
			} else {
				this.jiema = 'software';
			}
		},
		nextVideo() {
			if (this.nowPlayNum + 1 < this.playList[0].length) {
				// this.videoContext.exitFullScreen();
				// this.fullscreen=false;
				// this.hidePlay=false;
				this.playRate = 1.0;
				this.playTrueUrl(Number(this.nowPlayNum + 1));
			} else {
				uni.showToast({
					title: '最后一集啦！',
					duration: 2300
				});
			}
		},
		lastVideo() {
			if (this.nowPlayNum > 0) {
				// this.videoContext.exitFullScreen();
				// this.fullscreen=false;
				// this.hidePlay=false;
				this.playRate = 1.0;
				this.playTrueUrl(Number(this.nowPlayNum - 1));
			} else {
				uni.showToast({
					title: '第一集啦！',
					duration: 2300
				});
			}
		},
		nohideDetail() {
			// this.hideDetail=true;
			// this.hidePlay = false;
		},

		downvideo() {
			if (this.downImage == '../../static/down.png') {
				this.downImage = '../../static/up.png';
			} else {
				this.downImage = '../../static/down.png';
				var allDown = uni.getStorageSync('downLists');
				if (allDown == []) {
					uni.setStorageSync('downLists', this.downList);
					uni.switchTab({
						url: `/pages/download/download`
					});
				} else {
					uni.setStorageSync('downLists', [...allDown, ...this.downList]);
				}
				uni.switchTab({
					url: `/pages/download/download`
				});
			}
		},
		async tagChange(index) {
			this.current = index;
			this.playList = this.playLists[index];
			this.nowTag = this.tagLists[index];
		},
		async getPlayData(url, name) {
			let res = await db.get('site', name);
			if (res.flag) {
				if (res.data.exceptstring.length != 0) {
					uni.setStorageSync('matchRule', res.data.exceptstring);
				} else {
					uni.setStorageSync('matchRule', '!!!!!');
				}
				if (res.data.id == 'XT') {
					let res1 = await http.getPlayData(url, res.data);
					this.playList = res1.data[1][0];
					this.playLists = res1.data[1];
					this.tagLists = res1.data[0];
					this.nowTag = this.tagLists[0];
				}
				if (res.data.id == 'APP') {
					this.siteid = 'APP';
					let res1 = await http.appPlayData(url, res.data);
					this.playList = res1.data[1][0];
					this.playLists = res1.data[1];
					this.tagLists = res1.data[0];
					this.nowTag = this.tagLists[0];
				}
			} else {
				uni.showToast({ title: '视频源出错', type: 'warning', duration: '2300' });
				return false;
			}
		},
		pageBacked() {
			this.videoContext.pause();
			// this.$router.go(-1);
			uni.navigateBack();
		},
		async playTrueUrl(index) {
			// this.hidePlay=false;
			this.videoContext.pause();
			if (this.downImage == '../../static/down.png') {
				//this.hideDetail=false;
				this.setHistory(this.playList[0][index]);
				this.url = '';
				this.nowPlay = this.playList[0][index];
				this.nowPlayNum = index;
				if (this.siteid == 'XT') {
					this.getPlayUrl(this.playList[1][index]);
				}
				if (this.siteid == 'APP') {
					this.url = await http.appTureUrl(this.playList[1][index]);

					if (this.url && this.url.startsWith('http')) {
						if (this.url.indexOf('url=') > -1) {
							this.getPlayUrl(this.url);
						} else {
							let that = this;
							setTimeout(function() {
								that.hidePlay = true;
								// setTimeout(function(){
								// 	that.videoContext.requestFullScreen()
								// },500)
							}, 500);
						}
					} else {
						uni.showToast({
							title: '链接已失效!',
							duration: 1000
						});
					}
				}
			} else {
				this.url = '';
				this.hideDetail = true;
				this.hidePlay = false;

				for (var data of this.downList) {
					if (data[0] == this.playList[0][index] && data[2] == this.nowTag && data[3] == this.name && data[4] == this.title) {
						uni.showToast({
							title: '已添加过该集',
							duration: 800
						});
						return;
					}
				}
				this.downList.push([this.playList[0][index], this.playList[1][index], this.nowTag, this.name, this.title, '开始', uni.getStorageSync('matchRule')]);
				uni.showToast({
					title: this.playList[0][index] + '添加成功',
					duration: 500
				});
			}
		},
		async setHistory(name) {
			if (this.notiveImage == '../../static/star.png') {
				let key = this.name + '@@' + this.href;
				await db.remove('notive', key);
				let item = {
					name: this.name,
					href: this.href,
					title: this.title,
					image: this.image,
					state: this.state,
					userState: name
				};

				await db.addNotive('notive', item);

				uni.setStorageSync('isRefresh', 1);
			}
		},
		getPlayUrl(url) {
			if(this.webv!=0){
				this.webv.close();
				this.getPlayUrl(url)
			}else{
				
			
			uni.showLoading({
				title: '嗅探中...'
			});
			// uni.showToast({
			// 	title: '嗅探中...',
			// 	duration: 3000
			// });
			uni.setStorageSync('urlPlay', '');
			//#ifdef APP-PLUS
			var wv = plus.webview.create(url);
			this.webv=wv;
			wv.overrideUrlLoading({ mode: 'allow', match: '.*(mp4|video|m3u8).*' }, function(e) {
				console.log(e.url);
			});
			// 监听到页面加载图片资源时显示（{match:'.*\.(jpg|png|jpeg|bmp)\b'}）
			wv.listenResourceLoading({ match: '.*(mp4|video|m3u8).*' }, function(e) {
				var matchRule = uni.getStorageSync('matchRule');
				if (
					e.url.indexOf('51.la/') == -1 &&
					!e.url.endsWith('.js') &&
					e.url.indexOf('png') == -1 &&
					e.url.indexOf('.css') === -1 &&
					e.url.indexOf('gif') === -1 &&
					e.url.indexOf('php') == -1 &&
					!e.url.endsWith('.jpg') &&
					e.url.indexOf(matchRule) === -1 &&
					e.url.indexOf('url=') == -1
				) {
					console.log(e.url);
					uni.setStorageSync('urlPlay', e.url);

					wv.close();
				}
			});
			//#endif
			let that = this;
			let alltime = 0;
			var obj = setInterval(function() {
				var urlPlay = uni.getStorageSync('urlPlay');
				alltime = alltime + 2000;

				if (alltime < 30000 && urlPlay != '') {
					uni.hideLoading();
					that.url = urlPlay;
					that.hidePlay = true;
					// 	setTimeout(function(){
					// 		that.videoContext.requestFullScreen();
					// 	},500)
                    that.webv=0;
					clearInterval(obj);
				}
				if (alltime > 30000) {
					uni.hideLoading();
					uni.showToast({
						title: '嗅探超时！',
						duration: 1000
					});
					wv.close();
					that.webv=0;
					clearInterval(obj);
				}
			}, 2000);
			}
		},
		async removeItem() {
			// data=JSON.stringify(initNotive).replace('null,','')
			if (this.notiveImage == '../../static/star.png') {
				let key = this.name + '@@' + this.href;
				await db.remove('notive', key);
				this.notiveImage = '../../static/star1.png';
			} else {
				this.notiveImage = '../../static/star.png';
				let item = {
					name: this.name,
					href: this.href,
					title: this.title,
					image: this.image,
					state: this.state,
					userState: this.userState
				};
				await db.addNotive('notive', item);
			}
			uni.setStorageSync('isRefresh', 1);
		}
	},
	onLoad: function(option) {
		this.href = option.href;
		this.title = option.title;
		this.image = option.image;
		this.state = option.state;
		this.userState = option.userState;
		this.name = option.name;
		this.notiveImage = option.star;
		// document.write(option.star)
		this.getPlayData(option.href, option.name);
		this.videoContext = uni.createVideoContext('myVideo', this);
	},
	onUnload: function() {
		this.videoContext.pause();
		this.hidePlay = false;
		plus.navigator.setFullscreen(false);
		if(this.webv!=0){
			this.webv.close()
		}
	}
};
</script>

<style lang="scss" scoped>
.detail {
	.state {
		position: sticky;
		top: 0px;
		z-index: 99;
		display: flex;
		background-color: #ffffff;
		flex-direction: column;

		.back-img {
			height: 40px;
			width: 40px;
			margin-left: 10px;
		}
		.title {
			margin-top: 8px;

			font-size: 20px;
		}
		.downPlay {
			height: 40px;
			width: 40px;
			margin-right: 10px;
		}
	}
	.play {
		.player {
			margin-top: 5px;
			margin-bottom: 5px;
			.play-control {
				display: flex;
				flex-direction: row;
				justify-content: space-around;
				color: #ffffff;
				margin-top: 13x;
				margin-left: 15px;
			}
			.play-last {
				color: #ffffff;
			}
			.play-next {
				color: #ffffff;
			}
			.play-now {
				color: #ffffff;
			}
			.play-rate {
				color: #ffffff;
			}
			.play-direction {
				color: #ffffff;
			}
		}
		.goWeb {
			margin-left: 5px;
			margin-right: 5px;
			height: 50px;
		}
	}
	.header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		.out-item {
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			.item-img {
				height: 150px;
				width: 100px;
				margin-right: 20px;
				margin-left: 20px;
			}

			.item-box {
				width: 170px;
				display: flex;
				flex-direction: column;
				justify-content: space-around;
				.item-title {
					font-size: 20px;
				}
				.item-state {
					color: #999;
					font-size: 16px;
					display: flex;
				}
				.item-userstate {
					color: #999;
					font-size: 16px;
				}
				.item-name {
					color: #999;
					font-size: 16px;
				}
			}
		}

		.removeNotice {
			height: 30px;
			width: 30px;
			margin-top: 50px;
			margin-right: 20px;
		}
	}
	.tag-lists {
		margin-left: 20px;

		display: flex;
		flex-direction: row;
		margin-top: 10px;
		margin-bottom: 10px;
		flex-wrap: wrap;
		.nixu {
			justify-content: center;
			margin-top: 10px;

			margin-right: 20px;
			font-size: 20px;
		}
		.item-title {
			margin-left: 10px;
			color: #000;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			flex-wrap: wrap;
		}
		.item-title-active {
			color: #00aa00;
			flex-wrap: wrap;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			margin-left: 10px;
		}
	}

	.play-lists {
		display: flex;
		flex-direction: row;
		margin-bottom: 50px;
		margin-left: 10px;
		margin-right: 10px;
		flex-wrap: wrap;
		align-items: center;
		justify-content: space-between;
	}
	.playname {
		margin-top: 10px;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		flex: 1;
		font-size: 20px;
		flex-wrap: wrap;
	}
	.playname-active {
		margin-top: 10px;
		flex: 1;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		font-size: 20px;
		color: #00aa00;
		flex-wrap: wrap;
	}
}
</style>


<template>
	<view class="detail">
		<view class="state">
			<view style="height: 40px;background-color: #FFFFFF;"></view>
			<view style="flex-direction: row;justify-content: space-between;">
				<image src="../../static/back.png" mode="aspectFit" class="back-img" @click="pageBacked()"></image>
				<view class="title" @click="nohideDetail()">播放</view>
				
				<image :src="downImage" mode="aspectFit" class="downPlay" @click="downvideo()"></image>
			</view>
		</view>

		<view class="play" maxlength="300" v-if="hidePlay">
	<!-- <chunlei-video :srcList="url" :title="nowPlay"></chunlei-video> -->
			<video
				id="myVideo"
				ref="myVideo"

				class="player"
				:autoplay="true"
				:codec="jiema"
				:src="url"
				:controls="showControl"
				vslide-gesture="true"
				enable-play-gesture="true"
				:initial-time="initialtime"
				play-strategy="3"
				:header="Header"
				@error="changeWare()"
				show-loading="false"
				@ended="nextVideo"
				@fullscreenchange="enterFullScreen"
				@fullscreenclick="changeRatePlay"
                @controlstoggle="controlShow"
			>
				<!-- :title="nowPlay" -->
				<cover-view class="play-control" v-if="fullscreen && showControlshow&&showControl" >
					<text class="play-last" @click="lastVideo()">上一集</text>
					<text class="play-choose">选集</text>
					<text class="play-next" @click="nextVideo()">下一集</text>
					<text class="play-now">{{ nowPlay }}</text>
					<text class="play-rate" @click="changePlayRate()">速度:{{ String(playRate) }}</text>
					<text class="play-direction" @click="changeDirection()">旋转</text>
					<text class="play-nowtime">{{nowtime}}</text>
				</cover-view>
			</video>
			<button class="goWeb" @click="navigateUrl()">跳转浏览器播放</button>
		</view>
		<view class="header">
			<view class="out-item">
				<image :src="image" mode="aspectFit" class="item-img"></image>
				<view class="item-box">
					<text class="item-title">{{ title }}</text>
					<text class="item-name">来源：{{ name }}</text>
					<text class="item-state">状态：{{ state }}</text>
					<text class="item-userstate">上次观看：{{ userState }}</text>
				</view>
			</view>
			<image :src="notiveImage" mode="aspectFit" class="removeNotice" @click="removeItem()"></image>
		</view>
		<view class="tag-lists">
			<text class="nixu" @click="nixu">逆序</text>
			<view class="tag-data" v-for="(item, index) in tagLists" :key="index">
				<text class="item-title" :class="[current == index ? 'item-title-active' : '']" @click="tagChange(index)">{{ item.slice(0, 2) }}</text>
			</view>
		</view>
		<view class="play-lists">
			<view class="play-data" v-for="(item, index) in playList[0]" :key="index">
				<text class="playname" :class="[nowPlayNum == index ? 'playname-active' : '']" @click="playTrueUrl(index)">{{ item.slice(0, 25) }}</text>
			</view>
			<text class="playname"></text>
		</view>
	</view>
</template>
<script>
import db from '../../utils/database.js';
import http from '../../utils/request.js';
// import '../../utils/uni-webview.js'
export default {
	data() {
		return {
			downImage: '../../static/down.png',
			href: '',
			title: '',
			Header: {
				'User-Agent':
					'Mozilla/5.0 (Linux; Android 11; M2007J17C Build/RKQ1.200826.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/94.0.4606.85 Mobile Safari/537.36',
				'Connection':'keep-alive',
				'X-Requested-With': 'com.example.hikerview',
				'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',
				'Accept-Encoding': 'gzip, deflate',
				'Sec-Fetch-Site': 'same-site',
				'Sec-Fetch-Mode': 'cors',
				'Sec-Fetch-Dest': 'empty'
			},
			image: '',
			videoContext: null,
			videoTime:0,
			state: '',
			showControl:true,
			showControlshow:false,
			userState: '',
			name: '',
			hideDetail: true,
			nowtime:'',
			notiveImage: '',
			hidePlay: false,
			url: '',
			initialtime: 0,
			// jiema: 'hardware',
			jiema: 'software',
			tagLists: [],
			playLists: [],
			playList: [],
			downList: [],
			fullscreen: false,
			playRate: 1.0,
			nowTag: '',
			current: 0,
			nowPlayNum: null,
			nowPlay: null,
			fullControlsWidth: null,
			fullControlsHeigt: null,
			direction: -90,
		
			siteid: 'XT',
			webv:0
		};
	},
	onShow(){
		
	},
	created() {
		this.fullControlsWidth = uni.getSystemInfoSync().screenHeight;
		this.fullControlsHeigt = uni.getSystemInfoSync().screenWidth + 1;
		if (this.fullscreen && this.fullControlsHeigt > this.fullControlsWidth) {
			this.fullscreen = true;
			this.videoContext.requestFullScreen({
				direction: 0
			});
			this.direction = 0;
		}
	},
	methods: {
		controlShow(e){
			this.showControlshow=e.detail.show;
			if(this.showControlshow) this.getNowTime();
			
		},
		getNowTime() {
			var now = new Date();
			var hh = now.getHours(); //时
			if (hh < 10) hh = "0" + hh;
			var mm = now.getMinutes(); //分
			if (mm < 10) mm = "0" + mm;
			this.nowtime= `${hh}:${mm}`;
		},
		changePlayRate() {
			if (this.playRate == 1.0) {
				this.videoContext.playbackRate(1.5);
				this.playRate = 1.5;
				return;
			}
			if (this.playRate == 1.5) {
				this.videoContext.playbackRate(2.0);
				this.playRate = 2.0;
				return;
			}
			if (this.playRate === 2.0) {
				this.videoContext.playbackRate(1.0);
				this.playRate = 1.0;

				return;
			}
		},
		changeDirection() {
			this.videoContext.exitFullScreen();
			if (this.fullControlsWidth > this.fullControlsHeigt) {
				if (this.direction == 90) {
					this.videoContext.requestFullScreen({
						direction: -90
					});
					this.direction = -90;
					plus.navigator.setFullscreen(true);
				} else {
					this.videoContext.requestFullScreen({
						direction: 90
					});
					this.direction = 90;
					plus.navigator.setFullscreen(true);
				}
			} else {
				this.fullscreen = true;
				this.videoContext.requestFullScreen({
					direction: 0
				});
				this.direction = 0;
				plus.navigator.setFullscreen(true);
			}
		},
	
		nixu() {
			let temp = this.playList;
			this.playList = [[], []];
			let tempLen = temp[0].length;
			for (let i = 0; i < tempLen; i++) {
				this.playList[0].push(temp[0][tempLen - i - 1]);
				this.playList[1].push(temp[1][tempLen - i - 1]);
			}
		},
		promise(time = 0) {
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					resolve()
				}, time)
			})
			return promise
		},
		changeRatePlay(e) {
			var clickW = e.detail.screenX;
			var clickH = e.detail.screenY;
			if (this.playRate == 1.0 && 8 * clickW > 7 * this.fullControlsWidth && 5 * clickH > 2 * this.fullControlsHeigt && 5 * clickH < 4 * this.fullControlsHeigt) {
				this.videoContext.playbackRate(2.0);
				this.playRate = 2.0;
				this.showControl=false;
			
			} else {
				if (this.playRate != 1.0 && 8 * clickW > 7 * this.fullControlsWidth && 5 * clickH > 2 * this.fullControlsHeigt && 5 * clickH < 4 * this.fullControlsHeigt) {
					this.videoContext.playbackRate(1.0);
					this.playRate = 1.0;
					this.showControl=false;
				
				}else{
					this.showControl=true;
					
				}
			
			}
		},

		enterFullScreen() {
			this.fullscreen = !this.fullscreen;
			if (this.fullscreen) {
				plus.navigator.setFullscreen(true);
			} else {
				plus.navigator.setFullscreen(false);
			}
		},

		navigateUrl() {
			this.videoContext.pause();
			plus.runtime.openURL(
				this.url,
				err => {
					uni.setClipboardData({
						data: this.url,
						success: function() {
							uni.showToast({
								title: '复制成功！',
								duration: 2000
							});
						},
						fail: function(err) {
							uni.showToast({
								title: '复制失败！',
								duration: 2000
							});
						}
					});
				},
				'com.tencent.mtt'
			);
		},

		changeWare() {
			if (this.jiema === 'software') {
				this.$refs.uToast.show({ title: '视频源出错', type: 'warning', duration: '2300' });
			} else {
				this.jiema = 'software';
			}
		},
		nextVideo() {
			if (this.nowPlayNum + 1 < this.playList[0].length) {
				// this.videoContext.exitFullScreen();
				// this.fullscreen=false;
				// this.hidePlay=false;
				this.playRate = 1.0;
				this.playTrueUrl(Number(this.nowPlayNum + 1));
			} else {
				uni.showToast({
					title: '最后一集啦！',
					duration: 2300
				});
			}
		},
		lastVideo() {
			if (this.nowPlayNum > 0) {
				// this.videoContext.exitFullScreen();
				// this.fullscreen=false;
				// this.hidePlay=false;
				this.playRate = 1.0;
				this.playTrueUrl(Number(this.nowPlayNum - 1));
			} else {
				uni.showToast({
					title: '第一集啦！',
					duration: 2300
				});
			}
		},
		nohideDetail() {
			// this.hideDetail=true;
			// this.hidePlay = false;
		},

		downvideo() {
			if (this.downImage == '../../static/down.png') {
				this.downImage = '../../static/up.png';
			} else {
				this.downImage = '../../static/down.png';
				var allDown = uni.getStorageSync('downLists');
				if (allDown == []) {
					uni.setStorageSync('downLists', this.downList);
					uni.switchTab({
						url: `/pages/download/download`
					});
				} else {
					uni.setStorageSync('downLists', [...allDown, ...this.downList]);
				}
				uni.switchTab({
					url: `/pages/download/download`
				});
			}
		},
		async tagChange(index) {
			this.current = index;
			this.playList = this.playLists[index];
			this.nowTag = this.tagLists[index];
		},
		async getPlayData(url, name) {
			let res = await db.get('site', name);
			if (res.flag) {
				if (res.data.exceptstring.length != 0) {
					uni.setStorageSync('matchRule', res.data.exceptstring);
				} else {
					uni.setStorageSync('matchRule', '!!!!!');
				}
				if (res.data.id == 'XT') {
					let res1 = await http.getPlayData(url, res.data);
					this.playList = res1.data[1][0];
					this.playLists = res1.data[1];
					this.tagLists = res1.data[0];
					this.nowTag = this.tagLists[0];
				}
				if (res.data.id == 'APP') {
					this.siteid = 'APP';
					let res1 = await http.appPlayData(url, res.data);
					this.playList = res1.data[1][0];
					this.playLists = res1.data[1];
					this.tagLists = res1.data[0];
					this.nowTag = this.tagLists[0];
				}
			} else {
				uni.showToast({ title: '视频源出错', type: 'warning', duration: '2300' });
				return false;
			}
		},
		pageBacked() {
			this.videoContext.stop();
			// this.$router.go(-1);
			uni.navigateBack();
		},
		async playTrueUrl(index) {
			this.videoContext.pause();
		
			// this.hidePlay=false;
			if (this.downImage == '../../static/down.png') {
				//this.hideDetail=false;
				this.setHistory(this.playList[0][index]);
				// this.url = '';
				this.nowPlay = this.playList[0][index];
				this.nowPlayNum = index;
				if (this.siteid == 'XT') {
					this.getPlayUrl(this.playList[1][index]);
				}
				if (this.siteid == 'APP') {
					this.url = await http.appTureUrl(this.playList[1][index]);

					if (this.url && this.url.startsWith('http')) {
						if (this.url.indexOf('url=') > -1) {
							this.getPlayUrl(this.url);
						} else {
							let that = this;
							setTimeout(function() {
								that.hidePlay = true;
								that.videoContext.play();
								// setTimeout(function(){
								// 	that.videoContext.requestFullScreen()
								// },500)
							}, 500);
						}
					} else {
						uni.showToast({
							title: '链接已失效!',
							duration: 1000
						});
					}
				}
			} else {
				this.url = '';
				this.hideDetail = true;
				this.hidePlay = false;

				for (var data of this.downList) {
					if (data[0] == this.playList[0][index] && data[2] == this.nowTag && data[3] == this.name && data[4] == this.title) {
						uni.showToast({
							title: '已添加过该集',
							duration: 800
						});
						return;
					}
				}
				this.downList.push([this.playList[0][index], this.playList[1][index], this.nowTag, this.name, this.title, '开始', uni.getStorageSync('matchRule')]);
				uni.showToast({
					title: this.playList[0][index] + '添加成功',
					duration: 500
				});
			}
		},
		async setHistory(name) {
			if (this.notiveImage == '../../static/star.png') {
				let key = this.name + '@@' + this.href;
				await db.remove('notive', key);
				let item = {
					name: this.name,
					href: this.href,
					title: this.title,
					image: this.image,
					state: this.state,
					userState: name
				};

				await db.addNotive('notive', item);

				uni.setStorageSync('isRefresh', 1);
			}
		},
		getPlayUrl(url) {
			if(this.webv!=0){
				this.webv.close();
				this.getPlayUrl(url)
			}else{
				
			
			uni.showLoading({
				title: '嗅探中...'
			});
			// uni.showToast({
			// 	title: '嗅探中...',
			// 	duration: 3000
			// });
			uni.setStorageSync('urlPlay', '');
			//#ifdef APP-PLUS
			var wv = plus.webview.create(url);
			this.webv=wv;
			wv.overrideUrlLoading({ mode: 'allow', match: '.*(mp4|video|m3u8).*' }, function(e) {
				console.log(e.url);
			});
			// 监听到页面加载图片资源时显示（{match:'.*\.(jpg|png|jpeg|bmp)\b'}）
			wv.listenResourceLoading({ match: '.*(mp4|video|m3u8).*' }, function(e) {
				var matchRule = uni.getStorageSync('matchRule');
				if (
					e.url.indexOf('51.la/') == -1 &&
					!e.url.endsWith('.js') &&
					e.url.indexOf('png') == -1 &&
					e.url.indexOf('.css') === -1 &&
					e.url.indexOf('gif') === -1 &&
					e.url.indexOf('php') == -1 &&
					!e.url.endsWith('.jpg') &&
					e.url.indexOf(matchRule) === -1 &&
					e.url.indexOf('url=') == -1
				) {
					console.log(e.url);
					uni.setStorageSync('urlPlay', e.url);

					wv.close();
				}
			});
			//#endif
			let that = this;
			let alltime = 0;
			var obj = setInterval(function() {
				var urlPlay = uni.getStorageSync('urlPlay');
				alltime = alltime + 2000;

				if (alltime < 30000 && urlPlay != '') {
					uni.hideLoading();
					that.url = urlPlay;
					that.hidePlay = true;
					that.videoContext.play();
					// 	setTimeout(function(){
					// 		that.videoContext.requestFullScreen();
					// 	},500)
                    that.webv=0;
					clearInterval(obj);
				}
				if (alltime > 30000) {
					uni.hideLoading();
					uni.showToast({
						title: '嗅探超时！',
						duration: 1000
					});
					wv.close();
					that.webv=0;
					clearInterval(obj);
				}
			}, 2000);
			}
		},
		async removeItem() {
			// data=JSON.stringify(initNotive).replace('null,','')
			if (this.notiveImage == '../../static/star.png') {
				let key = this.name + '@@' + this.href;
				await db.remove('notive', key);
				this.notiveImage = '../../static/star1.png';
			} else {
				this.notiveImage = '../../static/star.png';
				let item = {
					name: this.name,
					href: this.href,
					title: this.title,
					image: this.image,
					state: this.state,
					userState: this.userState
				};
				await db.addNotive('notive', item);
			}
			uni.setStorageSync('isRefresh', 1);
		}
	},
	onLoad: function(option) {
		this.href = option.href;
		this.title = option.title;
		this.image = option.image;
		this.state = option.state;
		this.userState = option.userState;
		this.name = option.name;
		this.notiveImage = option.star;
		// document.write(option.star)
		this.getPlayData(option.href, option.name);
		this.videoContext = uni.createVideoContext('myVideo', this);
	},
	onUnload: function() {
		this.videoContext.pause();
		this.hidePlay = false;
		plus.navigator.setFullscreen(false);
		if(this.webv!=0){
			this.webv.close()
		}
	}
};
</script>

<style lang="scss" scoped>
.detail {
	.state {
		position: sticky;
		top: 0px;
		z-index: 99;
		display: flex;
		background-color: #ffffff;
		flex-direction: column;

		.back-img {
			height: 40px;
			width: 40px;
			margin-left: 10px;
		}
		.title {
			margin-top: 8px;

			font-size: 20px;
		}
		.downPlay {
			height: 40px;
			width: 40px;
			margin-right: 10px;
		}
	}
	.play {
		.player {
			margin-top: 5px;
			margin-bottom: 5px;
			
			.play-control {
				display: flex;
				flex-direction: row;
				justify-content: space-around;
				color: #ffffff;
				margin-top: 13x;
				margin-left: 30px;
				margin-right: 30px;
			}
			.play-choose{
				color: #ffffff;
			}
			.play-nowtime{
				color: #ffffff;
			}
			.play-last {
				color: #ffffff;
			}
			.play-next {
				color: #ffffff;
			}
			.play-now {
				color: #ffffff;
			}
			.play-rate {
				color: #ffffff;
			}
			.play-direction {
				color: #ffffff;
			}
		}
		.goWeb {
			margin-left: 5px;
			margin-right: 5px;
			height: 50px;
		}
	}
	.header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		.out-item {
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			.item-img {
				height: 150px;
				width: 100px;
				margin-right: 20px;
				margin-left: 20px;
			}

			.item-box {
				width: 170px;
				display: flex;
				flex-direction: column;
				justify-content: space-around;
				.item-title {
					font-size: 20px;
				}
				.item-state {
					color: #999;
					font-size: 16px;
					display: flex;
				}
				.item-userstate {
					color: #999;
					font-size: 16px;
				}
				.item-name {
					color: #999;
					font-size: 16px;
				}
			}
		}

		.removeNotice {
			height: 30px;
			width: 30px;
			margin-top: 50px;
			margin-right: 20px;
		}
	}
	.tag-lists {
		margin-left: 20px;

		display: flex;
		flex-direction: row;
		margin-top: 10px;
		margin-bottom: 10px;
		flex-wrap: wrap;
		.nixu {
			justify-content: center;
			margin-top: 10px;

			margin-right: 20px;
			font-size: 20px;
		}
		.item-title {
			margin-left: 10px;
			color: #000;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			flex-wrap: wrap;
		}
		.item-title-active {
			color: #00aa00;
			flex-wrap: wrap;
			margin-right: 10px;
			margin-top: 10px;
			font-size: 20px;
			margin-left: 10px;
		}
	}

	.play-lists {
		display: flex;
		flex-direction: row;
		margin-bottom: 50px;
		margin-left: 10px;
		margin-right: 10px;
		flex-wrap: wrap;
		align-items: center;
		justify-content: space-between;
	}
	.playname {
		margin-top: 10px;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		flex: 1;
		font-size: 20px;
		flex-wrap: wrap;
	}
	.playname-active {
		margin-top: 10px;
		flex: 1;
		margin-left: 10px;
		margin-right: 10px;
		margin-bottom: 10px;
		font-size: 20px;
		color: #00aa00;
		flex-wrap: wrap;
	}
}
</style>
